<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.scoreanalysis.system.mapper.UsersMapper">
  <resultMap id="BaseResultMap" type="cn.scoreanalysis.system.model.Users">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="studentid" jdbcType="INTEGER" property="studentid" />
    <result column="teacherid" jdbcType="INTEGER" property="teacherid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
  </resultMap>
<!--  多表查询resultMap-->
    <resultMap id="UserRoles" type="cn.scoreanalysis.system.vo.UserRoleVo">
      <id column="id" jdbcType="INTEGER" property="id" />
      <result column="studentid" jdbcType="INTEGER" property="studentid" />
      <result column="teacherid" jdbcType="INTEGER" property="teacherid" />
      <result column="username" jdbcType="VARCHAR" property="username" />
      <result column="password" jdbcType="VARCHAR" property="password" />
      <collection property="roles" ofType="cn.scoreanalysis.system.model.Role">
        <id column="roleid" jdbcType="INTEGER" property="id" />
        <result column="role" jdbcType="VARCHAR" property="role" />
        <result column="description" jdbcType="VARCHAR" property="description"/>
      </collection>

    </resultMap>
<!--  显示用户角色-->
  <select id="getUserRoleByUserId" parameterType="int" resultMap="UserRoles">
    SELECT user.username,user.id,role.role,role.id,role.description
    FROM USER,role,user_role ur
    WHERE ur.userid=user.id AND ur.roleid=role.id AND ur.userid=#{userid}
  </select>

<!-- 查询显示列表 -->
  <select id="selectAll" resultType="cn.scoreanalysis.system.model.Users" >
    select user.*
    from user
  </select>

<!--  查询用户 -->
  <select id="selectUserByUserName" parameterType="string" resultType="cn.scoreanalysis.system.model.Users">
    select * from user where username=#{username}
  </select>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, studentid, teacherid, username, password
  </sql>
  <select id="selectByExample" parameterType="cn.scoreanalysis.system.model.UsersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.scoreanalysis.system.model.UsersExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.scoreanalysis.system.model.Users" useGeneratedKeys="true" keyProperty="id" >
    insert into user ( studentid, teacherid,
      username, password)
    values (#{studentid,jdbcType=INTEGER}, #{teacherid,jdbcType=INTEGER},
      #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.scoreanalysis.system.model.Users">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="studentid != null">
        studentid,
      </if>
      <if test="teacherid != null">
        teacherid,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentid != null">
        #{studentid,jdbcType=INTEGER},
      </if>
      <if test="teacherid != null">
        #{teacherid,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.scoreanalysis.system.model.UsersExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentid != null">
        studentid = #{record.studentid,jdbcType=INTEGER},
      </if>
      <if test="record.teacherid != null">
        teacherid = #{record.teacherid,jdbcType=INTEGER},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=INTEGER},
      studentid = #{record.studentid,jdbcType=INTEGER},
      teacherid = #{record.teacherid,jdbcType=INTEGER},
      username = #{record.username,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.scoreanalysis.system.model.Users">
    update user
    <set>
      <if test="studentid != null">
        studentid = #{studentid,jdbcType=INTEGER},
      </if>
      <if test="teacherid != null">
        teacherid = #{teacherid,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.scoreanalysis.system.model.Users" >
    update user
    set studentid = #{studentid,jdbcType=INTEGER},
      teacherid = #{teacherid,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>