<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.scoreanalysis.system.mapper.ScoreMapper">
  <resultMap id="BaseResultMap" type="cn.scoreanalysis.system.model.Score">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="studentid" jdbcType="INTEGER" property="studentid" />
    <result column="courseid" jdbcType="INTEGER" property="courseid" />
    <result column="usualscore" jdbcType="REAL" property="usualscore" />
    <result column="middlescore" jdbcType="REAL" property="middlescore" />
    <result column="endscore" jdbcType="REAL" property="endscore" />
    <result column="finalscore" jdbcType="REAL" property="finalscore" />
    <result column="supplementaryscore" jdbcType="REAL" property="supplementaryscore" />
    <result column="rebuildscore" jdbcType="REAL" property="rebuildscore" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, studentid, courseid, usualscore, middlescore, endscore, finalscore, supplementaryscore, 
    rebuildscore
  </sql>
  <select id="selectByExample" parameterType="cn.scoreanalysis.system.model.ScoreExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from score
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from score
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from score
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.scoreanalysis.system.model.ScoreExample">
    delete from score
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.scoreanalysis.system.model.Score">
    insert into score (id, studentid, courseid, 
      usualscore, middlescore, endscore, 
      finalscore, supplementaryscore, rebuildscore
      )
    values (#{id,jdbcType=INTEGER}, #{studentid,jdbcType=INTEGER}, #{courseid,jdbcType=INTEGER}, 
      #{usualscore,jdbcType=REAL}, #{middlescore,jdbcType=REAL}, #{endscore,jdbcType=REAL}, 
      #{finalscore,jdbcType=REAL}, #{supplementaryscore,jdbcType=REAL}, #{rebuildscore,jdbcType=REAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.scoreanalysis.system.model.Score">
    insert into score
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="studentid != null">
        studentid,
      </if>
      <if test="courseid != null">
        courseid,
      </if>
      <if test="usualscore != null">
        usualscore,
      </if>
      <if test="middlescore != null">
        middlescore,
      </if>
      <if test="endscore != null">
        endscore,
      </if>
      <if test="finalscore != null">
        finalscore,
      </if>
      <if test="supplementaryscore != null">
        supplementaryscore,
      </if>
      <if test="rebuildscore != null">
        rebuildscore,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentid != null">
        #{studentid,jdbcType=INTEGER},
      </if>
      <if test="courseid != null">
        #{courseid,jdbcType=INTEGER},
      </if>
      <if test="usualscore != null">
        #{usualscore,jdbcType=REAL},
      </if>
      <if test="middlescore != null">
        #{middlescore,jdbcType=REAL},
      </if>
      <if test="endscore != null">
        #{endscore,jdbcType=REAL},
      </if>
      <if test="finalscore != null">
        #{finalscore,jdbcType=REAL},
      </if>
      <if test="supplementaryscore != null">
        #{supplementaryscore,jdbcType=REAL},
      </if>
      <if test="rebuildscore != null">
        #{rebuildscore,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.scoreanalysis.system.model.ScoreExample" resultType="java.lang.Long">
    select count(*) from score
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update score
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentid != null">
        studentid = #{record.studentid,jdbcType=INTEGER},
      </if>
      <if test="record.courseid != null">
        courseid = #{record.courseid,jdbcType=INTEGER},
      </if>
      <if test="record.usualscore != null">
        usualscore = #{record.usualscore,jdbcType=REAL},
      </if>
      <if test="record.middlescore != null">
        middlescore = #{record.middlescore,jdbcType=REAL},
      </if>
      <if test="record.endscore != null">
        endscore = #{record.endscore,jdbcType=REAL},
      </if>
      <if test="record.finalscore != null">
        finalscore = #{record.finalscore,jdbcType=REAL},
      </if>
      <if test="record.supplementaryscore != null">
        supplementaryscore = #{record.supplementaryscore,jdbcType=REAL},
      </if>
      <if test="record.rebuildscore != null">
        rebuildscore = #{record.rebuildscore,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update score
    set id = #{record.id,jdbcType=INTEGER},
      studentid = #{record.studentid,jdbcType=INTEGER},
      courseid = #{record.courseid,jdbcType=INTEGER},
      usualscore = #{record.usualscore,jdbcType=REAL},
      middlescore = #{record.middlescore,jdbcType=REAL},
      endscore = #{record.endscore,jdbcType=REAL},
      finalscore = #{record.finalscore,jdbcType=REAL},
      supplementaryscore = #{record.supplementaryscore,jdbcType=REAL},
      rebuildscore = #{record.rebuildscore,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.scoreanalysis.system.model.Score">
    update score
    <set>
      <if test="studentid != null">
        studentid = #{studentid,jdbcType=INTEGER},
      </if>
      <if test="courseid != null">
        courseid = #{courseid,jdbcType=INTEGER},
      </if>
      <if test="usualscore != null">
        usualscore = #{usualscore,jdbcType=REAL},
      </if>
      <if test="middlescore != null">
        middlescore = #{middlescore,jdbcType=REAL},
      </if>
      <if test="endscore != null">
        endscore = #{endscore,jdbcType=REAL},
      </if>
      <if test="finalscore != null">
        finalscore = #{finalscore,jdbcType=REAL},
      </if>
      <if test="supplementaryscore != null">
        supplementaryscore = #{supplementaryscore,jdbcType=REAL},
      </if>
      <if test="rebuildscore != null">
        rebuildscore = #{rebuildscore,jdbcType=REAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.scoreanalysis.system.model.Score">
    update score
    set studentid = #{studentid,jdbcType=INTEGER},
      courseid = #{courseid,jdbcType=INTEGER},
      usualscore = #{usualscore,jdbcType=REAL},
      middlescore = #{middlescore,jdbcType=REAL},
      endscore = #{endscore,jdbcType=REAL},
      finalscore = #{finalscore,jdbcType=REAL},
      supplementaryscore = #{supplementaryscore,jdbcType=REAL},
      rebuildscore = #{rebuildscore,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>